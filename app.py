from flask import Flask, render_template, request, redirect, url_for, flash, abort, jsonify, session
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import os
from datetime import datetime
import requests
import json
import threading
import re

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here-change-in-production'

# Initialize Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = '7910995507:AAEoOR8OdaqkSFyWhr5mIFmGJ1wus-7fPUk'
TELEGRAM_CHAT_ID = '-1002275825444'

class User(UserMixin):
    def __init__(self, id, username, password_hash):
        self.id = id
        self.username = username
        self.password_hash = password_hash

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram —á–µ—Ä–µ–∑ requests
def send_telegram_message(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —á–µ—Ä–µ–∑ API"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, data=data, timeout=10)
        return response.json()
    except Exception as e:
        print(f"Error sending Telegram message: {e}")
        return None

def send_telegram_reply(chat_id, message, reply_to_message_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        if reply_to_message_id:
            data['reply_to_message_id'] = reply_to_message_id
            
        response = requests.post(url, data=data, timeout=10)
        return response.json()
    except Exception as e:
        print(f"Error sending Telegram reply: {e}")
        return None

def send_telegram_notification(service_type, data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ"""
    try:
        if service_type == 'callback':
            message = f"üìû <b>–ù–û–í–ê –ó–ê–Ø–í–ö–ê –ù–ê –î–ó–í–Ü–ù–û–ö</b>\n\n" \
                     f"üë§ –Ü–º'—è: {data['name']}\n" \
                     f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n" \
                     f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        elif service_type == 'service':
            message = f"üöÄ <b>–ù–û–í–ê –ó–ê–Ø–í–ö–ê –ù–ê –ü–û–°–õ–£–ì–£</b>\n\n" \
                     f"üìã –ü–æ—Å–ª—É–≥–∞: {data['service_title']}\n" \
                     f"üë§ –Ü–º'—è: {data['name']}\n" \
                     f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n" \
                     f"üìß Email: {data.get('email', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n" \
                     f"üè† –ê–¥—Ä–µ—Å–∞: {data.get('address', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n" \
                     f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {data.get('message', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n" \
                     f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        elif service_type == 'promotion':
            message = f"üéØ <b>–ù–û–í–ê –ó–ê–Ø–í–ö–ê –ó–ê –ê–ö–¶–Ü–Ñ–Æ</b>\n\n" \
                     f"üë§ –Ü–º'—è: {data['name']}\n" \
                     f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n" \
                     f"üìß Email: {data.get('email', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n" \
                     f"üè† –ê–¥—Ä–µ—Å–∞: {data.get('address', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n" \
                     f"üìã –¢–∞—Ä–∏—Ñ: {data.get('tariff', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n" \
                     f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {data.get('comment', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n" \
                     f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        elif service_type == 'chat':
            message = f"üí¨ <b>–ù–û–í–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –í –ß–ê–¢–Ü</b>\n\n" \
                     f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {data['user']}\n" \
                     f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {data['message']}\n" \
                     f"üÜî ID —Å–µ—Å—ñ—ó: {data['session_id']}\n" \
                     f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n" \
                     f"üí° <i>–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ: /reply {data['session_id']} –≤–∞—à —Ç–µ–∫—Å—Ç</i>"
        
        elif service_type == 'review':
            message = f"‚≠ê <b>–ù–û–í–ò–ô –í–Ü–î–ì–£–ö</b>\n\n" \
                     f"üë§ –Ü–º'—è: {data['name']}\n" \
                     f"‚≠ê –û—Ü—ñ–Ω–∫–∞: {'‚òÖ' * data['rating']}{'‚òÜ' * (5 - data['rating'])}\n" \
                     f"üìù –í—ñ–¥–≥—É–∫: {data['text'][:100]}...\n" \
                     f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = send_telegram_message(TELEGRAM_CHAT_ID, message)
        if result and not result.get('ok'):
            print(f"Telegram API error: {result}")
        
        return result
        
    except Exception as e:
        print(f"Error in send_telegram_notification: {e}")

def handle_telegram_command(message_text, chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ Telegram"""
    try:
        if message_text.startswith('/reply'):
            # –§–æ—Ä–º–∞—Ç: /reply session_id —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            match = re.match(r'/reply\s+(\S+)\s+(.+)', message_text)
            if match:
                session_id = match.group(1)
                reply_text = match.group(2)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É
                conn = sqlite3.connect('database.db')
                c = conn.cursor()
                c.execute("INSERT INTO chat_messages (session_id, admin_message, is_from_user) VALUES (?, ?, ?)",
                         (session_id, reply_text, False))
                conn.commit()
                conn.close()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                send_telegram_message(chat_id, f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è —Å–µ—Å—ñ—ó {session_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {reply_text}")
                return True
                
        elif message_text.startswith('/help'):
            help_text = (
                "ü§ñ <b>–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:</b>\n\n"
                "/help - –î–æ–ø–æ–º–æ–≥–∞\n"
                "/reply [session_id] [—Ç–µ–∫—Å—Ç] - –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É\n"
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫\n"
                "/list - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π"
            )
            send_telegram_message(chat_id, help_text)
            return True
            
    except Exception as e:
        print(f"Error handling Telegram command: {e}")
        send_telegram_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏")
    
    return False

# Create database and tables if they don't exist
def init_db():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    # Create news table
    c.execute('''CREATE TABLE IF NOT EXISTS news
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  title TEXT NOT NULL,
                  content TEXT NOT NULL,
                  image_url TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # Create services table
    c.execute('''CREATE TABLE IF NOT EXISTS services
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  title TEXT NOT NULL,
                  description TEXT NOT NULL,
                  image_url TEXT,
                  form_title TEXT,
                  form_fields TEXT)''')
    
    # Create callback requests table
    c.execute('''CREATE TABLE IF NOT EXISTS callback_requests
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT NOT NULL,
                  phone TEXT NOT NULL,
                  status TEXT DEFAULT 'new',
                  telegram_message_id TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # Create service requests table
    c.execute('''CREATE TABLE IF NOT EXISTS service_requests
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  service_id INTEGER,
                  service_title TEXT,
                  name TEXT NOT NULL,
                  phone TEXT NOT NULL,
                  email TEXT,
                  address TEXT,
                  message TEXT,
                  status TEXT DEFAULT 'new',
                  telegram_message_id TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  FOREIGN KEY (service_id) REFERENCES services (id))''')
    
    # Create promotion requests table
    c.execute('''CREATE TABLE IF NOT EXISTS promotion_requests
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT NOT NULL,
                  phone TEXT NOT NULL,
                  email TEXT,
                  address TEXT,
                  tariff TEXT,
                  comment TEXT,
                  status TEXT DEFAULT 'new',
                  telegram_message_id TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # Create chat messages table
    c.execute('''CREATE TABLE IF NOT EXISTS chat_messages
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  session_id TEXT NOT NULL,
                  user_message TEXT,
                  admin_message TEXT,
                  is_from_user BOOLEAN,
                  telegram_message_id TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # Create chat sessions table
    c.execute('''CREATE TABLE IF NOT EXISTS chat_sessions
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  session_id TEXT UNIQUE NOT NULL,
                  telegram_chat_id TEXT,
                  user_name TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # Create reviews table
    c.execute('''CREATE TABLE IF NOT EXISTS reviews
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  client_name TEXT NOT NULL,
                  rating INTEGER CHECK(rating >= 1 AND rating <= 5),
                  text TEXT NOT NULL,
                  is_approved BOOLEAN DEFAULT FALSE,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # Create FAQ table
    c.execute('''CREATE TABLE IF NOT EXISTS faq
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  question TEXT NOT NULL,
                  answer TEXT NOT NULL,
                  category TEXT,
                  order_index INTEGER DEFAULT 0,
                  is_active BOOLEAN DEFAULT TRUE)''')
    
    # Create admin user table
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  username TEXT UNIQUE NOT NULL,
                  password_hash TEXT NOT NULL)''')
    
    # Check if admin user exists, if not create one
    c.execute("SELECT COUNT(*) FROM users WHERE username = 'admin'")
    if c.fetchone()[0] == 0:
        password_hash = generate_password_hash('admin')
        c.execute("INSERT INTO users (username, password_hash) VALUES (?, ?)", 
                 ('admin', password_hash))
    
    # Add sample services
    c.execute("SELECT COUNT(*) FROM services")
    if c.fetchone()[0] == 0:
        sample_services = [
            ('–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è –¥–æ–º—É', '–®–≤–∏–¥–∫—ñ—Å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è –≤–∞—à–æ–≥–æ –±—É–¥–∏–Ω–∫—É', '', '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 'name,phone,address'),
            ('–¶–∏—Ñ—Ä–æ–≤–µ TV', '–Ø–∫—ñ—Å–Ω–µ —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è –∑ —Å–æ—Ç–Ω—è–º–∏ –∫–∞–Ω–∞–ª—ñ–≤', '', '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è TV', 'name,phone,package'),
            ('–í—ñ–¥–µ–æ—Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è', '–°–∏—Å—Ç–µ–º–∏ –±–µ–∑–ø–µ–∫–∏ –¥–ª—è –≤–∞—à–æ–≥–æ –¥–æ–º—É', '', '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ—Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è', 'name,phone,address,rooms'),
            ('–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è –±—ñ–∑–Ω–µ—Å—É', '–ù–∞–¥—ñ–π–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –≤–∞—à–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É', '', '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –¥–ª—è –±—ñ–∑–Ω–µ—Å—É', 'name,company,phone,email')
        ]
        
        for service in sample_services:
            c.execute("INSERT INTO services (title, description, image_url, form_title, form_fields) VALUES (?, ?, ?, ?, ?)", service)
    
    # Add sample news
    c.execute("SELECT COUNT(*) FROM news")
    if c.fetchone()[0] == 0:
        c.execute("INSERT INTO news (title, content, image_url) VALUES (?, ?, ?)",
                 ('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ —Å–∞–π—Ç—É!', '–ú–∏ —Ä–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å –Ω–∞ –Ω–∞—à–æ–º—É –Ω–æ–≤–æ–º—É —Å–∞–π—Ç—ñ. –¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏.', ''))
        c.execute("INSERT INTO news (title, content, image_url) VALUES (?, ?, ?)",
                 ('–ù–æ–≤—ñ —Ç–∞—Ä–∏—Ñ–∏ –Ω–∞ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç', '–ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤—ñ —Ç–∞—Ä–∏—Ñ–∏ –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é —Ç–∞ –∫—Ä–∞—â–∏–º–∏ —É–º–æ–≤–∞–º–∏ –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.', ''))
    
    # Add sample FAQ
    c.execute("SELECT COUNT(*) FROM faq")
    if c.fetchone()[0] == 0:
        sample_faq = [
            ('–Ø–∫ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç?', '–î–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º.', '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è'),
            ('–Ø–∫—ñ —Å–ø–æ—Å–æ–±–∏ –æ–ø–ª–∞—Ç–∏?', '–ú–∏ –ø—Ä–∏–π–º–∞—î–º–æ –æ–ø–ª–∞—Ç—É –≥–æ—Ç—ñ–≤–∫–æ—é, –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—é –∫–∞—Ä—Ç–∫–æ—é —Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º—ñ–Ω–∞–ª–∏.', '–û–ø–ª–∞—Ç–∞'),
            ('–Ø–∫ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–æ—Å—Ç—É–ø?', '–ó–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–æ—é —Ç–µ—Ö–Ω—ñ—á–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É.', '–¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞')
        ]
        
        for faq in sample_faq:
            c.execute("INSERT INTO faq (question, answer, category) VALUES (?, ?, ?)", faq)
    
    conn.commit()
    conn.close()

# User loader callback
@login_manager.user_loader
def load_user(user_id):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user_data = c.fetchone()
    conn.close()
    
    if user_data:
        return User(id=user_data[0], username=user_data[1], password_hash=user_data[2])
    return None

# Routes
@app.route('/')
def index():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM news ORDER BY created_at DESC LIMIT 3")
    news_items = c.fetchall()
    
    c.execute("SELECT * FROM services")
    services = c.fetchall()
    conn.close()
    
    return render_template('index.html', news_items=news_items, services=services)

@app.route('/tariffs')
def tariffs():
    tariff_type = request.args.get('type', 'apartment')
    return render_template('tariffs.html', tariff_type=tariff_type)

@app.route('/promotions')
def promotions():
    return render_template('promotions.html')

@app.route('/news')
def news():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM news ORDER BY created_at DESC")
    news_items = c.fetchall()
    conn.close()
    
    return render_template('news.html', news_items=news_items)

@app.route('/news/<int:news_id>')
def news_item(news_id):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM news WHERE id = ?", (news_id,))
    news_item = c.fetchone()
    conn.close()
    
    if news_item is None:
        abort(404)
        
    return render_template('news_item.html', news_item=news_item)

@app.route('/reviews')
def reviews():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM reviews WHERE is_approved = TRUE ORDER BY created_at DESC")
    reviews = c.fetchall()
    conn.close()
    
    return render_template('reviews.html', reviews=reviews)

@app.route('/faq')
def faq():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM faq WHERE is_active = TRUE ORDER BY order_index, category")
    faq_items = c.fetchall()
    conn.close()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    faq_by_category = {}
    for item in faq_items:
        category = item[3] or '–ó–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è'
        if category not in faq_by_category:
            faq_by_category[category] = []
        faq_by_category[category].append(item)
    
    return render_template('faq.html', faq_by_category=faq_by_category)

# API Routes
@app.route('/get_service/<int:service_id>')
def get_service(service_id):
    try:
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("SELECT * FROM services WHERE id = ?", (service_id,))
        service = c.fetchone()
        conn.close()
        
        if service:
            return jsonify({
                'id': service[0],
                'title': service[1],
                'description': service[2],
                'image_url': service[3],
                'form_title': service[4],
                'form_fields': service[5].split(',')
            })
        return jsonify({'error': 'Service not found'}), 404
    except Exception as e:
        print(f"Error in get_service: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/callback', methods=['POST'])
def callback():
    try:
        phone = request.form.get('phone')
        name = request.form.get('name', '–ö–ª—ñ—î–Ω—Ç')
        
        if not phone:
            flash('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É')
            return redirect(url_for('index'))
        
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("INSERT INTO callback_requests (name, phone) VALUES (?, ?)", 
                 (name, phone))
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        send_telegram_notification('callback', {
            'name': name,
            'phone': phone
        })
        
        flash('–î—è–∫—É—î–º–æ! –ú–∏ –≤–∞–º –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.')
        return redirect(url_for('index'))
        
    except Exception as e:
        print(f"Error in callback: {e}")
        flash('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        return redirect(url_for('index'))

@app.route('/api/callback_request', methods=['POST'])
def callback_request():
    try:
        name = request.form.get('name')
        phone = request.form.get('phone')
        
        if not name or not phone:
            return jsonify({'success': False, 'message': '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è.'}), 400
        
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("INSERT INTO callback_requests (name, phone) VALUES (?, ?)", 
                 (name, phone))
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        send_telegram_notification('callback', {
            'name': name,
            'phone': phone
        })
        
        return jsonify({'success': True, 'message': '–î—è–∫—É—î–º–æ! –ú–∏ –≤–∞–º –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'})
    except Exception as e:
        print(f"Error in callback_request: {e}")
        return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'}), 500

@app.route('/api/chat_message', methods=['POST'])
def chat_message():
    try:
        message = request.form.get('message')
        session_id = request.form.get('session_id', 'default')
        user = request.form.get('user', '–ì—ñ—Å—Ç—å')
        
        if not message:
            return jsonify({'success': False, 'message': '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.'}), 400
        
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("INSERT INTO chat_messages (session_id, user_message, is_from_user) VALUES (?, ?, ?)",
                 (session_id, message, True))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        c.execute("INSERT OR IGNORE INTO chat_sessions (session_id, user_name) VALUES (?, ?)",
                 (session_id, user))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        send_telegram_notification('chat', {
            'user': user,
            'message': message,
            'session_id': session_id
        })
        
        return jsonify({'success': True, 'message': '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ –≤–∞–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'})
    except Exception as e:
        print(f"Error in chat_message: {e}")
        return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'}), 500

@app.route('/api/submit_service_form/<int:service_id>', methods=['POST'])
def submit_service_form(service_id):
    try:
        form_data = request.get_json()
        
        if not form_data:
            return jsonify({'success': False, 'message': '–î–∞–Ω—ñ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ.'}), 400
        
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
        c.execute("SELECT title FROM services WHERE id = ?", (service_id,))
        service = c.fetchone()
        service_title = service[0] if service else "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ—Å–ª—É–≥–∞"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
        c.execute("INSERT INTO service_requests (service_id, service_title, name, phone, email, address, message) VALUES (?, ?, ?, ?, ?, ?, ?)",
                 (service_id, 
                  service_title,
                  form_data.get('name', ''),
                  form_data.get('phone', ''),
                  form_data.get('email', ''),
                  form_data.get('address', ''),
                  form_data.get('message', '')))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        send_telegram_notification('service', {
            'service_title': service_title,
            'name': form_data.get('name', ''),
            'phone': form_data.get('phone', ''),
            'email': form_data.get('email', ''),
            'address': form_data.get('address', ''),
            'message': form_data.get('message', '')
        })
        
        return jsonify({'success': True, 'message': '–î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞. –ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'})
    except Exception as e:
        print(f"Error in submit_service_form: {e}")
        return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ä–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'}), 500

@app.route('/api/submit_promotion_form', methods=['POST'])
def submit_promotion_form():
    try:
        form_data = request.get_json()
        
        if not form_data:
            return jsonify({'success': False, 'message': '–î–∞–Ω—ñ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ.'}), 400
        
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –ø–æ –∞–∫—Ü–∏–∏
        c.execute("INSERT INTO promotion_requests (name, phone, email, address, tariff, comment) VALUES (?, ?, ?, ?, ?, ?)",
                 (form_data.get('name', ''),
                  form_data.get('phone', ''),
                  form_data.get('email', ''),
                  form_data.get('address', ''),
                  form_data.get('tariff', ''),
                  form_data.get('comment', '')))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        send_telegram_notification('promotion', {
            'name': form_data.get('name', ''),
            'phone': form_data.get('phone', ''),
            'email': form_data.get('email', ''),
            'address': form_data.get('address', ''),
            'tariff': form_data.get('tariff', ''),
            'comment': form_data.get('comment', '')
        })
        
        return jsonify({'success': True, 'message': '–î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–∫—Ü—ñ—é –ø—Ä–∏–π–Ω—è—Ç–∞. –ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'})
    except Exception as e:
        print(f"Error in submit_promotion_form: {e}")
        return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ä–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'}), 500

@app.route('/api/add_review', methods=['POST'])
def add_review():
    try:
        name = request.form.get('name')
        rating = request.form.get('rating')
        text = request.form.get('text')
        
        if not name or not rating or not text:
            return jsonify({'success': False, 'message': '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è.'}), 400
        
        rating = int(rating)
        
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("INSERT INTO reviews (client_name, rating, text) VALUES (?, ?, ?)",
                 (name, rating, text))
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        send_telegram_notification('review', {
            'name': name,
            'rating': rating,
            'text': text
        })
        
        return jsonify({'success': True, 'message': '–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! –í—ñ–Ω –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.'})
    except Exception as e:
        print(f"Error in add_review: {e}")
        return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'}), 500

# Telegram webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route('/telegram_webhook', methods=['POST'])
def telegram_webhook():
    try:
        data = request.get_json()
        if 'message' in data:
            message = data['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/'):
                handle_telegram_command(text, chat_id)
            else:
                # –ü—Ä–æ—Å—Ç–æ–µ —ç—Ö–æ –¥–ª—è —Ç–µ—Å—Ç–∞
                send_telegram_message(chat_id, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏.")
                
        return jsonify({'status': 'ok'})
    except Exception as e:
        print(f"Error in telegram_webhook: {e}")
        return jsonify({'status': 'error'}), 500

# Admin routes
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE username = ?", (username,))
        user_data = c.fetchone()
        conn.close()
        
        if user_data and check_password_hash(user_data[2], password):
            user = User(id=user_data[0], username=user_data[1], password_hash=user_data[2])
            login_user(user)
            return redirect(url_for('admin'))
        else:
            flash('–ù–µ–≤—ñ—Ä–Ω–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å')
    
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

@app.route('/admin')
@login_required
def admin():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    # Get statistics
    c.execute("SELECT COUNT(*) FROM callback_requests WHERE status = 'new'")
    new_callbacks = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM service_requests WHERE status = 'new'")
    new_services = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM promotion_requests WHERE status = 'new'")
    new_promotions = c.fetchone()[0]
    
    c.execute("SELECT COUNT(*) FROM reviews WHERE is_approved = FALSE")
    new_reviews = c.fetchone()[0]
    
    # Get recent requests
    c.execute("SELECT * FROM callback_requests ORDER BY created_at DESC LIMIT 5")
    recent_callbacks = c.fetchall()
    
    c.execute("SELECT * FROM service_requests ORDER BY created_at DESC LIMIT 5")
    recent_services = c.fetchall()
    
    conn.close()
    
    return render_template('admin.html',
                         new_callbacks=new_callbacks,
                         new_services=new_services,
                         new_promotions=new_promotions,
                         new_reviews=new_reviews,
                         recent_callbacks=recent_callbacks,
                         recent_services=recent_services)

@app.route('/admin/requests')
@login_required
def admin_requests():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    c.execute("SELECT * FROM callback_requests ORDER BY created_at DESC")
    callback_requests = c.fetchall()
    
    c.execute("SELECT * FROM service_requests ORDER BY created_at DESC")
    service_requests = c.fetchall()
    
    c.execute("SELECT * FROM promotion_requests ORDER BY created_at DESC")
    promotion_requests = c.fetchall()
    
    conn.close()
    
    return render_template('admin_requests.html',
                         callback_requests=callback_requests,
                         service_requests=service_requests,
                         promotion_requests=promotion_requests)

@app.route('/admin/request/update/<string:request_type>/<int:request_id>/<string:status>')
@login_required
def update_request_status(request_type, request_id, status):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    if request_type == 'callback':
        c.execute("UPDATE callback_requests SET status = ? WHERE id = ?", (status, request_id))
    elif request_type == 'service':
        c.execute("UPDATE service_requests SET status = ? WHERE id = ?", (status, request_id))
    elif request_type == 'promotion':
        c.execute("UPDATE promotion_requests SET status = ? WHERE id = ?", (status, request_id))
    
    conn.commit()
    conn.close()
    
    flash('–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ')
    return redirect(url_for('admin_requests'))

@app.route('/admin/reviews')
@login_required
def admin_reviews():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT * FROM reviews ORDER BY created_at DESC")
    reviews = c.fetchall()
    conn.close()
    
    return render_template('admin_reviews.html', reviews=reviews)

@app.route('/admin/review/update/<int:review_id>/<string:action>')
@login_required
def update_review(review_id, action):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    
    if action == 'approve':
        c.execute("UPDATE reviews SET is_approved = TRUE WHERE id = ?", (review_id,))
    elif action == 'reject':
        c.execute("DELETE FROM reviews WHERE id = ?", (review_id,))
    
    conn.commit()
    conn.close()
    
    flash('–í—ñ–¥–≥—É–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ')
    return redirect(url_for('admin_reviews'))

# Error handlers
@app.errorhandler(404)
def not_found_error(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500

if __name__ == '__main__':
    # Initialize database
    init_db()
    
    print("Starting Flask application...")
    print("Telegram notifications enabled: ", bool(TELEGRAM_BOT_TOKEN and TELEGRAM_BOT_TOKEN != '7910995507:AAEoOR8OdaqkSFyWhr5mIFmGJ1wus-7fPUk'))
    
    # Start Flask application
    app.run(debug=True, host='0.0.0.0', port=5000)